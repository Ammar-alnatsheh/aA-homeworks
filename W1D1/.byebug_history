q
n
q
n
nn
n
grid
display i
q
display i
p_grid(grid)
n
display i
p_grid(grid)
nn
n
grid
grid = empty_grid
p_grid(grid)
grid
display i
dislay i
n
nn
n
display i
n
q
p_grid(grid)
n
p_grid(grid)
n
p_grid(grid)
n
p_grid(grid)
display i
n
p_grid(grid)
q
p_grid(grid)
n
nn
n
p_grid(grid)
n
p_grid(grid)
n
p_grid(grid)
q
p_grid(grid)
q
puts grid
print grid
display grid
grid
q
load 'eight_queens_problem.rb'
n
nnn
n
grid
q
n
nn
n
grid
display grid
print grid
puts grid
num_queen
n
num_queen
n
num_queen
n
num_queen
num_queens
grid[7]
grid[6]
grid[5]
grid[4]
grid[3]
grid[2]
grid[1]
grid[0]
p grid[0]
p grid
grid
n
grid[i][j]
display j
display i
i
n
grid[i][j]
q
@losses
@losses[@player_1] = 3
@losses[@player_1]
@losses
valid_play?("p")
take_turn(current_player)
current_player
next_player!
next_player
current_player
display @player_2
display @player_1
q
n
self
n
self
n
self
value
n
display i
self
n
self
n
value
n
value
q
sub_arr
n
s
self.length
result
arg
q
self[i].class.to_s
self[i].class.to_a
self[i].class
self[i]
result
